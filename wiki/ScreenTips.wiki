#summary Commonly used screen commands / places to get more info.

= Introduction =

Suppose you are reading your mail or even composing a mail message in mutt, when suddenly the system begins to respond slowly. A useful tool for examining what processes are currently being run on the system is 'top'. Unfortunately, you're going to have to get out of your e-mail so that you can fire up 'top' and have a look at the state of current running processes. What if there was a better way?

The *[http://www.gnu.org/software/screen/ GNU screen program]* is a utility of great importance to end users working on a remote console. This small utility provides a sort of text-based windowing system, which allows multiple shells and shell applications to be open simultaneously. This brief article attempts to introduce a small subset of 'screen' and its vast options.

= Details =

screen is useful for a good many tasks, but one of the most common things that occurs when working with a remote session (unfortunately) is getting disconnected. If you've ever found yourself writing code in an editor like *[EmacsTips emacs]* or *[VimTips vim]* and lost a significant amount of worked when the connection to the remote system suddenly hiccuped, screen just might be your best friend. In a scenario such as this, a screen user would issue the following command after re-establishing their connection to the server:

{{{
screen -r
}}}

Most of the time, this is all that is necessary to re-establish a screen session, but screen supports a lot of options in the area of re-establishing sessions. Check them out at any time with:

{{{
man screen
}}}

What if you actually want to quit a screen session on purpose? There is a way to do this as well, by pressing:

{{{
CTRL-A CTRL-D
}}}

Once again, this session can be re-established by entering 'screen -r' from the console. Note that re-establishing a session relies on the fact that the system maintaining the screen session has not lost power or been rebooted. screen sessions live in RAM as a regular system process and will not persist across a system restart.

It's great to know there is a layer of protection offered by using screen while editing over a remote console session, but if this is all screen could do it would hardly be worthy of a tutorial of its own(let alone the dozens of these you can find on the 'net). Let's begin with screen's most common keystroke, CTRL-A.

CTRL-A was mentioned above but it is worth a moment of reflection. CTRL-A is the starting key sequence for nearly all of screen's many functions. Note that at current time, if you are using *[CrustyHome C.r.us.t.y.]*, this key sequence is substituted for CTRL-Z. Now that you know CTRL-A (CTRL-Z), let's look at some useful key sequences.

|| *Key Sequence* || *Command Function* ||
|| CTRL-A CTRL-C  || Create a new console in the current screen session. ||
|| CTRL-A CTRL-A  || Switch between the current and the previous console. ||
|| CTRL-A "       || View a curses-based list of all screen consoles. ||
|| CTRL-A CTRL-D  || Detach the current screen session. ||
|| CTRL-A CTRL-\  || Kill the current screen session and _all_ sub-processes of screen. ||

This is the subset of screen commands this author uses most frequently. Since this is a wiki page, feel free to add your favorite screen commands to this list to share with the rest of us.